
Import("smartbot.dsf")
Import("base.dsb>performance.dsf")

g_touchUtil = GetObject("LuaTouchUtil")
g_touchUtil:SetFactor(DpToPixel(5), 10)

g_performance = GetObject("LuaPerformanceFactory"):Create()

function TouchClickD(x, y, id)
    -- Logm("Debug click %d, %d", x, y)
    g_touchUtil:Click(x, y, id)
end

function GetRandomDirection(self)

    math.randomseed(GetSystemTime()) 
    direction_value = math.random(0, 9)
    
    if direction_value >= 0 and direction_value <= 2 then
        return self.steering.DIRECTION_LEFT
    elseif direction_value >= 3 and direction_value <= 5 then
        return self.steering.DIRECTION_RIGHT
        
    elseif direction_value >= 6 and  direction_value <= 8 then
        return math.random(self.steering.DIRECTION_TOPLEFT, self.steering.DIRECTION_TOPRIGHT)
    else
        return math.random(self.steering.DIRECTION_BOTTOMLEFT, self.steering.DIRECTION_BOTTOMRIGHT)
    end
    
end

--
-- Character
--
Character = {}
Character.Create = function(self, pic, scorebar_x, scorebar_y)

    obj = {}
    
    obj.pic = pic
    
    obj.x = -1
    obj.y = -1
    obj.timedout = 0
    obj.timedsec = 2500
    
    obj.scorebar_x = scorebar_x
    obj.scorebar_y = scorebar_y
    
    obj.Reset = function(self)
    
        self.x = -1
        self.y = -1
        self.timedout = 0
        
    end
    
    obj.Check = function(self)
    
        local status = false
        
        if self.x == -1 or self.y == -1 then
            status = true
        else
        
            if GetSystemTime() >= self.timedout then
                status = true
            else
                status = false
            end
        
        end
        
        return status
        
    end
    
    obj.Find = function(self)
    
        if self:Check() then    
        
            topleft_x, topleft_y, bottomright_x, bottomright_y = self.pic:GetRange()
            if topleft_y < self.scorebar_y then
                topleft_y = self.scorebar_y
            end
            
            if topleft_x >= bottomright_x then
                return -1, -1
            end
            
            if topleft_y >= bottomright_y then
                return -1, -1
            end
            
            self.pic:SetRange(topleft_x, topleft_y, bottomright_x, bottomright_y)
            self.x, self.y = self.pic:Find(97)
            if not(self.x == -1) and not(self.y == -1) then
                -- Update per 2 sec once it is found
                Logm("Find at %d, %d", self.x, self.y)
                self.timedout  = GetSystemTime() + self.timedsec
            end
        end
        
        return self.x, self.y
    
    end
    
    obj.FindFromCenter = function(self, attack_distance_value, center_x, center_y, width, height)

        if self:Check() then   
        
            Logm("Center %d, %d", center_x, center_y)

            local topleft_x = center_x - attack_distance_value
            if topleft_x < 0 then
                topleft_x = 0
            end
            local topleft_y = center_y - attack_distance_value
            if topleft_y < 0 then
                topleft_y = 0
            end
            
            local bottomright_x = center_x + attack_distance_value
            if bottomright_x > width then
                bottomright_x = width
            end
            local bottomright_y = center_y + attack_distance_value
            if bottomright_y > height then
                bottomright_y = height
            end
            
            if topleft_x >= bottomright_x then
                return -1, -1
            end
            
            if topleft_y >= bottomright_y then
                return -1, -1
            end
            
            if topleft_y < self.scorebar_y then
                
                --- Try small rect first
                local small_topleft_x = topleft_x
                local small_bottomright_x = bottomright_x
                if small_topleft_x < self.scorebar_x then
                    small_topleft_x = self.scorebar_x
                end
                if small_bottomright_x > (width - self.scorebar_x) then
                    small_bottomright_x = (width - self.scorebar_x)
                end
                
                Logm("Find from small range %d, %d tp %d, %d", small_topleft_x, topleft_y, small_bottomright_x, bottomright_y)
                self.pic:SetRange(small_topleft_x, topleft_y, small_bottomright_x, self.scorebar_y)
                self.x, self.y = self.pic:Find(97)
                if not(self.x == -1) and not(self.y == -1) then
                    self.timedout  = GetSystemTime() + self.timedsec
                    return self.x, self.y
                end
                
                topleft_y = self.scorebar_y
            end
            
            Logm("Find from range %d, %d tp %d, %d", topleft_x, topleft_y, bottomright_x, bottomright_y)
            self.pic:SetRange(topleft_x, topleft_y, bottomright_x, bottomright_y)
            self.x, self.y = self.pic:Find(97)
            if not(self.x == -1) and not(self.y == -1) then
                self.timedout  = GetSystemTime() + self.timedsec
                return self.x, self.y
            end
        
        end
        
        return self.x, self.y
        
    end
    
    return obj
    
end

function Config(self, buttons, size)

    self.buttons = buttons
    self.size = size
    
    self.character_self = Character:Create(self.buttons.green_blood_bar, self.buttons.offset_scorebard_x, self.buttons.offset_scorebard_y)
    self.character_enemy = Character:Create(self.buttons.red_blood_bar, self.buttons.offset_scorebard_x, self.buttons.offset_scorebard_y)
    
end

function Print(self)
    self:Print_()

    Logm("---------------------------------------")
    
    local width = GetDisplayWidth()
    local height = GetDisplayHeight()
    
    local size = 7

    local width_size = math.floor(width / size)
    local height_size = math.floor(height / size)
    
    for i = 0, (size * size) - 1 do
    
        local x_pos = math.floor(i % size)
        local y_pos = math.floor(i / size)
        
        local x = x_pos * width_size
        local y = y_pos * height_size
        Logm("[%d - %d, %d] %d, %d", i, x_pos, y_pos, x, y)

    end
    
end

ATTACK_DISTANCE_SHORT = 0
ATTACK_DISTANCE_MEDIUM = 1
ATTACK_DISTANCE_LONG = 2

EVENT_GEM_GRAB = 1
EVENT_SHOWDOWN = 2
EVENT_HEIST = 3
EVENT_SIEGE = 4

function Play(self, event, attack_distance, reborn)

    local width = GetDisplayWidth()
    local height = GetDisplayHeight()

    local move_id = 3
    local touch_id = 5

    --Logm("Play with event:%d, attack_distance:%d", event, attack_distance)
    
    DOCHECK(self.size % 2 == 1)
    
    -- 0-based index
    local midlle_line = math.floor(self.size * 0.4)
    if reborn then
        Logm("reborn")
        midlle_line = math.floor(self.size * 0.6 * 0.5)
    end
    midlle_line = midlle_line + self.buttons.offset_line
    
    local index_offset = math.floor(self.size / 3)
    
    local middle_index_min  = midlle_line * self.size + index_offset
    local middle_index_max = middle_index_min + self.size - 1 - index_offset
    
    local top_offset = self.size
    local top_index_min = middle_index_min - top_offset
    local top_index_max = middle_index_max - top_offset
    
    --Logm("middle %d to %d", middle_index_min, middle_index_max)
    --Logm("top %d to %d", top_index_min, top_index_max)
    
    local target_position = -1
    if event == EVENT_GEM_GRAB  then
        
        if attack_distance == ATTACK_DISTANCE_LONG then
            target_position = math.random(middle_index_min, middle_index_max)
        elseif attack_distance == ATTACK_DISTANCE_MEDIUM or attack_distance == ATTACK_DISTANCE_SHORT then
            target_position = math.random(top_index_min, top_index_max)
        end
    
    elseif event == EVENT_SHOWDOWN then
        target_position = math.random(middle_index_min, middle_index_max)
        
    elseif event == EVENT_HEIST then
        target_position = math.random(top_index_min, top_index_max)
        
    elseif event == EVENT_SIEGE then
        target_position = math.random(top_index_min, top_index_max)
        
    end
    
    --Logm("Target position %d", target_position)
    
    if attack_distance == ATTACK_DISTANCE_LONG then
        attack_distance_value = DpToPixel(250)
    elseif attack_distance == ATTACK_DISTANCE_MEDIUM then
        attack_distance_value = DpToPixel(180)
    elseif attack_distance == ATTACK_DISTANCE_SHORT then
        attack_distance_value = DpToPixel(90)
    end
    
    local move = 3
    if reborn then
        move = 5
        
        self.prev_x = -1
        self.prev_y = -1
    end
    
    self.steering:SetCenter(self.buttons.steering_center_x, self.buttons.steering_center_y)
    self.steering:SetSize(math.floor(self.buttons.steering_size / 1))
    
    local enemy_found = false
    
    local prev_direction = -1
    local direction = self:GetRandomDirection()
    local moving = false
    
    while move > 0 do
    
        local sx = -1
        local sy = -1
        local ex = -1
        local ey = -1
        
        g_performance:Set("FindSelf")
        local sx, sy
        sx, sy = self.character_self:Find()
        g_performance:Print()
        
        if not (sx == -1) and not (sy == -1) then
            
            Logm("self at %d, %d", sx, sy)
            
            -- Random movement default
            direction = self:GetRandomDirection()
            
            IsSamePlace = function(x1, y1, x2, y2)
            
                local dx, dy
                
                if x1 > x2 then
                    dx = x1 - x2
                else
                    dx = x2 - x1
                end
                
                if y1 > y2 then
                    dy = y1 - y2
                else
                    dy = y2 - y1
                end
                
                local max_dis = DpToPixel(16)
                
                if dx > max_dis then
                    return false
                end
            
                if dy > max_dis then
                    return false
                end
                
                return true
                
            end
            
            if IsSamePlace(sx, sy, self.prev_x, self.prev_y) then
            
            else
                self.stuck_timedout = GetSystemTime()
            end
            
            if GetSystemTime()  -  self.stuck_timedout >= (3 * 1000) then
                
                -- Use random movement if self is unable to move
                Logm("Stuck at the same place %d, %d", sx, sy)
                self.stuck_timedout = GetSystemTime()
                
            else
                
                Logm("Player at %d, %d", sx, sy)
                local position = self.steering:GetPosition(sx, sy, self.size)
                Logm("Player at position %d", position)
                if position == target_position then
                    Logm("At targeted position 1")
                else
                    Logm("Go to center position %d from %d", target_position, position)
                    local target_direction = self.steering:GetDirection(position, target_position, self.size)
                    if target_direction == self.steering:GetCenterDirection() then
                        Logm("At targeted position 2")
                    else
                        Logm("Go to center direction %d", target_direction)
                        direction = target_direction
                    end
                end
                
            end
            
            if enemy_found then
            else
                g_performance:Set("FindEnemy 1")
                ex, ey = self.character_enemy:FindFromCenter(attack_distance_value, sx, sy, width, height)
                if not (ex == -1) and not (ey == -1) then
                    Logm("enemy at %d, %d", ex, ey)
                    
                    enemy_found = true
                end
                g_performance:Print()
            end
            
            self.prev_x = sx
            self.prev_y = sy
    
        else
            
            -- Use random movement if self is not found
            direction = self:GetRandomDirection()
            
            if not (self.prev_x == -1) and not (self.prev_y == -1) then
            
                if enemy_found then
                else
                    g_performance:Set("FindEnemy 2")
                    ex, ey = self.character_enemy:FindFromCenter(attack_distance_value, self.prev_x, self.prev_y, width, height)
                    if not (ex == -1) and not (ey == -1) then
                        enemy_found = true
                    end
                    g_performance:Print()
                end
                
            end
            
        end
        
        if enemy_found then
            Logm("Enemy found and Firing ...")
            TouchClickD(self.buttons.steering_power_fire_x, self.buttons.steering_power_fire_y, touch_id)
            TouchClickD(self.buttons.steering_fire_x, self.buttons.steering_fire_y, touch_id)
            
            -- Move left or right only when firing
            direction = math.random(3, 5)
        end
        
        g_performance:Set("Move")
        if prev_direction ~= -1 and prev_direction ~= direction then
            self.steering:End()
        end
        if self.steering:GetMode() == "shell_event" then
            self.steering:TimedoutMove(direction, move_id, 3000)
        else
            self.steering:TimedoutMove(direction, move_id, 2000)
        end
        prev_direction = direction
        g_performance:Print()
        
        move = move - 1
    end

end

function End(self)
    local move_id = 3
    local touch_id = 5

    g_touchUtil:Up(touch_id)
    self.steering:End()
    
end

function RegisterObject()
	local obj = {}
    
    obj.Create = function(self)
        
        obj = GetObject("LuaSmartBotFactory"):Create()
        
        obj.GetRandomDirection = GetRandomDirection
        
        -- Save the overrided function
        obj.Print_ = obj.Print
        obj.Print = Print

        obj.Config = Config
        obj.Play = Play
        obj.End = End
        
        obj.prev_x = -1
        obj.prev_y = -1
        
        obj.stuck_timedout = GetSystemTime()
        
        return obj
    end

	
	SetObject("LuaBsBotFactory", obj)
	Logd("LuaBsBotFactory has been registered")
end

